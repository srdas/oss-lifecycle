
@book{moody_rebel_2002,
	address = {Cambridge, Mass},
	edition = {First Edition},
	title = {Rebel {Code}: {Linux} {And} {The} {Open} {Source} {Revolution}},
	isbn = {978-0-7382-0670-7},
	shorttitle = {Rebel {Code}},
	abstract = {"Open source" began as the mantra of a small group of idealistic hackers and has blossomed into the all-important slogan for progressive business and computing. This fast-moving narrative starts at ground zero, with the dramatic incubation of open-source software by Linux and its enigmatic creator, Linus Torvalds. With firsthand accounts, it describes how a motley group of programmers managed to shake up the computing universe and cause a radical shift in thinking for the post-Microsoft era. A powerful and engaging tale of innovation versus big business, Rebel Code chronicles the race to create and perfect open-source software, and provides the ideal perch from which to explore the changes that cyberculture has engendered in our society. Based on over fifty interviews with open-source protagonists such as Torvalds and open source guru Richard Stallman, Rebel Code captures the voice and the drama behind one of the most significant business trends in recent memory.},
	language = {English},
	publisher = {Basic Books},
	author = {Moody, Glyn},
	month = jul,
	year = {2002},
}

@misc{perez_project_nodate,
	title = {Project {Jupyter}: {Computational} {Narratives} as the {Engine} of {Collaborative} {Data} {Science} {\textbar} by {Project} {Jupyter} {\textbar} {Jupyter} {Blog}},
	url = {https://blog.jupyter.org/project-jupyter-computational-narratives-as-the-engine-of-collaborative-data-science-2b5fb94c3c58},
	urldate = {2024-06-09},
	author = {Perez, Fernando and Granger, Brian E.},
}

@misc{leven_as_nodate,
	title = {As {Project} {Jupyter} celebrates 20 years, {Fernando} {Pérez} reflects on how it started, open science’s impact and the value of diversity in coding {\textbar} {CDSS} at {UC} {Berkeley}},
	url = {https://cdss.berkeley.edu/news/project-jupyter-celebrates-20-years-fernando-perez-reflects-how-it-started-open-sciences},
	urldate = {2024-06-09},
	author = {Leven, Rachel},
}

@article{perkel_ten_2021,
	title = {Ten computer codes that transformed science},
	volume = {589},
	copyright = {2021 Nature},
	url = {https://www.nature.com/articles/d41586-021-00075-2},
	doi = {10.1038/d41586-021-00075-2},
	abstract = {From Fortran to arXiv.org, these advances in programming and platforms sent biology, climate science and physics into warp speed.},
	language = {en},
	number = {7842},
	urldate = {2024-06-09},
	journal = {Nature},
	author = {Perkel, Jeffrey M.},
	month = jan,
	year = {2021},
	note = {Bandiera\_abtest: a
Cg\_type: News Feature
Publisher: Nature Publishing Group
Subject\_term: Computer science, Mathematics and computing, Software, Technology},
	keywords = {Computer science, Software, Mathematics and computing, Technology},
	pages = {344--348},
	file = {Snapshot:/Users/sanjivda/Zotero/storage/GLPZ8BXK/d41586-021-00075-2.html:text/html},
}

@misc{vu_project_nodate,
	title = {Project {Jupyter}: {A} {Computer} {Code} that {Transformed} {Science}},
	url = {https://cs.lbl.gov/news-media/news/2021/project-jupyter-a-computer-code-that-transformed-science/},
	urldate = {2024-06-09},
	author = {Vu, Linda},
}

@article{granger_jupyter_2021,
	title = {Jupyter: {Thinking} and {Storytelling} {With} {Code} and {Data}},
	volume = {23},
	issn = {1558-366X},
	doi = {10.1109/MCSE.2021.3059263},
	abstract = {Project Jupyter is an open-source project for interactive computing widely used in data science, machine learning, and scientific computing. We argue that even though Jupyter helps users perform complex, technical work, Jupyter itself solves problems that are fundamentally human in nature. Namely, Jupyter helps humans to think and tell stories with code and data. We illustrate this by describing three dimensions of Jupyter: 1) interactive computing; 2) computational narratives; and 3) the idea that Jupyter is more than software. We illustrate the impact of these dimensions on a community of practice in earth and climate science.},
	number = {2},
	journal = {Computing in Science \& Engineering},
	author = {Granger, Brian E. and Pérez, Fernando},
	month = mar,
	year = {2021},
	keywords = {Machine learning, Data science, Meteorology, Open source software, Scientific computing},
	pages = {7--14},
}

@misc{asay_project_nodate,
	title = {Project {Jupyter} {\textbar} {EarthCube}},
	url = {https://www.earthcube.org/project-jupyter},
	urldate = {2024-06-09},
	author = {Asay, Matt and Bruch, Kimberly Mann},
}

@misc{noauthor_white_nodate,
	title = {White {House} {Office} of {Science} \& {Technology} {Policy} {Announces} {Year} of {Open} {Science} {Recognition} {Challenge} {Winners} {\textbar} {OSTP} {\textbar} {The} {White} {House}},
	url = {https://www.whitehouse.gov/ostp/news-updates/2024/03/21/white-house-office-of-science-technology-policy-announces-year-of-open-science-recognition-challenge-winners/},
	urldate = {2024-06-09},
}

@misc{noauthor_2024_nodate,
	title = {2024 {State} of {Open} {Source} {Report} {\textbar} {OpenLogic} by {Perforce}},
	url = {https://www.openlogic.com/resources/state-of-open-source-report},
	urldate = {2024-06-09},
}

@misc{peterson_how_2018,
	title = {How {I} coined the term 'open source' {\textbar} {Opensource}.com},
	url = {https://opensource.com/article/18/2/coining-term-open-source-software},
	urldate = {2024-06-09},
	journal = {https://opensource.com/article/18/2/coining-term-open-source-software},
	author = {Peterson, Christine},
	year = {2018},
}

@misc{nduta_brief_nodate,
	title = {A {Brief} {History} of {Open} {Source}},
	url = {https://www.freecodecamp.org/news/brief-history-of-open-source/},
	urldate = {2024-06-09},
	author = {Nduta, Agnes},
}

@misc{singh_brief_nodate,
	title = {A {Brief} {History} {Of} {Open} {Source} {\textbar} {Gitcoin} {Blog}},
	url = {https://www.gitcoin.co/blog/a-brief-history-of-open-source},
	urldate = {2024-06-09},
	author = {Singh, Vivek},
}

@misc{pal_history_nodate,
	title = {History of {Open} {Source} {Software} (with an interactive timeline)},
	url = {https://www.btw.so/blog/history-of-open-source-software/},
	urldate = {2024-06-09},
	author = {Pal, Saumo},
	file = {History of Open Source Software (with an interactive timeline):/Users/sanjivda/Zotero/storage/P6RMTWPT/history-of-open-source-software.html:text/html},
}

@article{beg_using_2021,
	title = {Using {Jupyter} for {Reproducible} {Scientific} {Workflows}},
	volume = {23},
	issn = {1558-366X},
	url = {https://ieeexplore.ieee.org/document/9325550},
	doi = {10.1109/MCSE.2021.3052101},
	abstract = {Literate computing has emerged as an important tool for computational studies and open science, with growing folklore of best practices. In this work, we report two case studies—one in computational magnetism and another in computational mathematics—where domain-specific software was exposed to the Jupyter environment. This enables high level control of simulations and computation, interactive exploration of computational results, batch processing on HPC resources, and reproducible workflow documentation in Jupyter notebooks. In the first study, Ubermag drives existing computational micromagnetics software through a domain-specific language embedded in Python. In the second study, a dedicated Jupyter kernel interfaces with the GAP system for computational discrete algebra and its dedicated programming language. In light of these case studies, we discuss the benefits of this approach, including progress toward more reproducible and reusable research results and outputs, notably through the use of infrastructure such as JupyterHub and Binder.},
	number = {2},
	urldate = {2024-06-23},
	journal = {Computing in Science \& Engineering},
	author = {Beg, Marijan and Taka, Juliette and Kluyver, Thomas and Konovalov, Alexander and Ragan-Kelley, Min and Thiéry, Nicolas M. and Fangohr, Hans},
	month = mar,
	year = {2021},
	note = {Conference Name: Computing in Science \& Engineering},
	keywords = {Computational modeling, Analytical models, Magnetic domains, Mathematical model, Micromagnetics, Python, Software tools},
	pages = {36--46},
}

@techreport{bals_2024_2024,
	title = {2024 {Open} {Source} {Security} and {Risk} {Analysis} {Report} ({OSSRA}) {\textbar} {Synopsys}},
	url = {https://www.synopsys.com/blogs/software-security/open-source-trends-ossra-report.html},
	abstract = {Explore key insights into the evolving open source landscape from the 2024 OSSRA report. Learn about the latest OSS trends and effective management strategies.},
	language = {en},
	urldate = {2024-06-23},
	institution = {Blackduck, Inc.},
	author = {Bals, Fred},
	year = {2024},
}

@book{blind_impact_2021,
	title = {The impact of open source software and hardware on technological independence, competitiveness and innovation in the {EU} economy: final study report},
	isbn = {978-92-76-30980-2},
	shorttitle = {The impact of open source software and hardware on technological independence, competitiveness and innovation in the {EU} economy},
	url = {https://data.europa.eu/doi/10.2759/430161},
	abstract = {This study analyses the economic impact of Open Source Software (OSS) and Hardware (OSH) on the European economy. It was commissioned by the European Commission’s DG CONNECT. It is estimated that companies located in the EU invested around €1 billion in OSS in 2018, which resulted in an impact on the European economy of between €65 and €95 billion. The analysis estimates a cost-benefit ratio of above 1:4 and predicts that an increase of 10\% of OSS contributions would annually generate an additional 0.4\% to 0.6\% GDP as well as more than 600 additional ICT start-ups in the EU. Case studies reveal that by procuring OSS instead of proprietary software, the public sector could reduce the total cost of ownership, avoid vendor lock-in and thus increase its digital autonomy. The study also contains an analysis of existing public policy actions in Europe and around the world. The scale of Europe’s institutional capacity related to OSS, however, is disproportionately smaller than the scale of the value created by OSS. The study therefore gives a number of specific public policy recommendations aimed at achieving a digitally autonomous public sector, open R\&D enabling European growth and a digitised and internally competitive industry.},
	language = {eng},
	urldate = {2024-06-23},
	publisher = {Publications Office of the European Union},
	author = {Blind, Knut and Pätsch, Sivan and Muto, Sachiko and Böhm, Mirko and Schubert, Torben and Grzegorzewska, Paula and Katz, Andrew},
	year = {2021},
	keywords = {innovation, business administration, competitiveness, cost-benefit analysis, digital technology, economic consequence, economic growth, European undertaking, gross domestic product, information technology, Information technology and telecommunications, open source software, public sector, report, research and development, supplier, technological independence},
}

@inproceedings{robbins_first_2021,
	address = {London},
	title = {A {First} {Look} at {Open} {Source} {Software} {Investment} in the {United} {States} and in {Other} {Countries}, 2009-2019},
	url = {https://jbsc.netlify.app/talk/a-first-look-at-open-source-software-investment-in-the-united-states-and-in-other-countries-2009-2019/},
	abstract = {Researchers and policymakers can access detailed data about patents, designs, and research publications as output indicators of useful knowledge. However, as digitization of the tools of knowledge increases, this picture is increasingly incomplete. Digitization also provides the opportunity to gather data about other types of useful knowledge and knowledge assets. In this paper, we develop new measures of intangible capital. Specifically, we use GitHub repository data on software freely shared between 2009 and 2019 to develop time series estimates of annual nominal and real investment and real capital stocks for open source software (OSS) in the United States. We estimate investment in OSS by using a cost approach to produce measures comparable to other nonmarket intangible investment, such as capitalized R\&D, entertainment, literary, and artistic originals, and own-account business software. Our estimates for OSS on GitHub in 2019 place the equivalent cost of OSS created by U.S. contributors (contributors with U.S. addresses) at over \$300 billion with an equivalent cost of global OSS creation on GitHub over \$500 billion (based on U.S. costs). The richness of the collected GitHub data enables further analyses, including the measurement of contributions in OSS by various economic sectors within the U.S. and countries and the study of structural features of international collaborations within the global OSS ecosystem. Open Source Software (OSS), as defined by Open Source Initiative, is computer software with its source code shared with a license in which the copyright holder provides the rights to study, change, and distribute the software to anyone and for any purpose. OSS is developed, maintained, and extended both within and outside of the private sector, through the contribution of independent developers as well as people from universities, government research institutions, businesses, and nonprofits. Many OSS projects are hosted in free repositories, and information on contributors and development activity embedded in these repositories is publicly available. GitHub is the largest platform with over 50 million users and developers worldwide. We collect 7.8 million project repositories, containing metadata such as author, license, commits (approved code edits), and lines of code. The methodology for estimating investment through resource costs for OSS development follows standard methodologies for accounting for nonmarket output based on the sum of all costs. We use lines of code as the input measure of effort to estimate the time spent on software development, accounting for project complexity. Wages and compensation are based on Bureau of Labor Statistics occupation-level data. Non-labor costs are estimated based on industry account ratios from the U.S. input-output tables. The capital stocks are created with the perpetual inventory method using computer software depreciation rates from the Bureau of Economic Analysis. The estimates presented in this paper extend previous work on the resource cost of creating open source software packages for the R and Python software languages. Finally, the GitHub data, which we plan to make publicly available, presents a unique opportunity to conduct supplementary analyses around the development of open source software. Two important applications are presented in this paper. First, using the same resource cost approach, we examine the contribution of the government sector to OSS and present estimates of the amount of OSS shared by the U.S. federal government between 2009 and 2019. Second, we use OSS contributors’ locations to generate contributor networks and study structural features of international collaborations using social network analysis methods. We also identify key players in the OSS ecosystem using various network centrality metrics.},
	language = {en-us},
	urldate = {2024-06-23},
	booktitle = {{IARIW}-{ESCoE} {Conference} “{Measuring} {Intangible} {Assets} and {Their} {Contribution} to {Growth}”},
	author = {Robbins, Carol Ann and Korkmaz, Gizem and Guci, Ledia and Calderón, J. Bayoán Santiago and Kramer, Brandon Lee},
	year = {2021},
}

@article{murciano-goroff_hidden_2021,
	title = {Hidden software and veiled value creation: {Illustrations} from server software usage},
	volume = {50},
	issn = {0048-7333},
	shorttitle = {Hidden software and veiled value creation},
	url = {https://www.sciencedirect.com/science/article/pii/S0048733321001323},
	doi = {10.1016/j.respol.2021.104333},
	abstract = {How do you measure the value of a commodity that transacts at a price of zero from an economic standpoint? This study examines the potential for and extent of omission and misattribution in standard approaches to economic accounting with regards to open source software, an unpriced commodity in the digital economy. The study is the first to follow usage and upgrading of unpriced software over a long period of time. It finds evidence that software updates mislead analyses of sources of firm productivity and identifies several mechanisms that create issues for mismeasurement. To illustrate these mechanisms, this study closely examines one asset that plays a critical role in the digital economic activity, web server software. We analyze the largest dataset ever compiled on web server use in the United States and link it to disaggregated information on over 200,000 medium to large organizations in the United States between 2001 and 2018. In our sample, we find that the omission of economic value created by web server software is substantial and that this omission indicates there is over \$4.5 billion dollars of mismeasurement of server software across organizations in the United States. This mismeasurement varies by organization age, geography, industry and size. We also find that dynamic behavior, such as improvements of server technology and entry of new products, further exacerbates economic mismeasurement.},
	number = {9},
	urldate = {2024-06-23},
	journal = {Research Policy},
	author = {Murciano-Goroff, Raviv and Zhuo, Ran and Greenstein, Shane},
	month = nov,
	year = {2021},
	keywords = {Open source software, Apache, Digital economics, Economic measurement},
	pages = {104333},
}

@article{greenstein_digital_2014,
	title = {Digital dark matter and the economic contribution of {Apache}},
	volume = {43},
	issn = {0048-7333},
	url = {https://econpapers.repec.org/article/eeerespol/v_3a43_3ay_3a2014_3ai_3a4_3ap_3a623-631.htm},
	abstract = {Researchers have long hypothesized that research outputs from government, university, and private company R\&D contribute to economic growth, but these contributions may be difficult to measure when they take a non-pecuniary form. The growth of networking devices and the Internet in the 1990s and 2000s magnified these challenges, as illustrated by the deployment of the descendent of the NCSA HTTPd server, otherwise known as Apache. This study asks whether this experience could produce measurement issues in standard productivity analysis, specifically, omission and attribution issues, and, if so, whether the magnitude is large enough to matter. The study develops and analyzes a novel data set consisting of a 1\% sample of all outward-facing web servers used in the United States. We find that use of Apache potentially accounts for a mismeasurement of somewhere between \$2 billion and \$12 billion, which equates to between 1.3\% and 8.7\% of the stock of prepackaged software in private fixed investment in the United States and a very high rate of return to the original federal investment in the Internet. We argue that these findings point to a large potential undercounting of the rate of return from IT spillovers from the invention of the Internet. The findings also suggest a large potential undercounting of “digital dark matter” in general.},
	number = {4},
	urldate = {2024-06-23},
	journal = {Research Policy},
	author = {Greenstein, Shane and Nagle, Frank},
	year = {2014},
	note = {Publisher: Elsevier},
	keywords = {Apache, Digital economics, Economic measurement, Open source},
	pages = {623--631},
}

@techreport{nagle_census_2022,
	title = {Census {II} of {Free} and {Open} {Source} {Software} — {Application} {Libraries}},
	url = {https://www.linuxfoundation.org/research/census-ii-of-free-and-open-source-software-application-libraries},
	abstract = {Produced in partnership with Harvard Laboratory for Innovation Science (LISH) and the Open Source Security Foundation (OpenSSF), Census II is the second investigation into the widespread use of Free and Open Source Software (FOSS). The Census II effort utilizes data from partner Software Composition Analysis (SCA) companies including Snyk, the Synopsys Cybersecurity Research Center (CyRC), and FOSSA. The aggregated data includes over half a million observations of FOSS libraries used in production applications at thousands of companies, aiming to shed light on the most commonly used FOSS packages at the application library level. This effort builds on the Census I report that focused on the lower level critical operating system libraries and utilities, improving our understanding of the FOSS packages that software applications rely on. Such insights will help identify critical FOSS packages to allow resource prioritization to address security issues in this widely used software.},
	language = {en},
	urldate = {2024-06-23},
	institution = {The Linux Foundation and The Laboratory for Innovation Science at Harvard},
	author = {Nagle, Frank and Dana, James and Hoffman, Jennifer and Randazzo, Steven and Zhou, Yanou},
	year = {2022},
	pages = {162},
}

@book{horowitz_software_2001,
	address = {Upper Saddle River, NJ},
	edition = {HAR/CDR edition},
	title = {Software {Cost} {Estimation} {With} {Cocomo} {II}},
	isbn = {978-0-13-026692-7},
	abstract = {Provides a thorough rework of the classic COCOMO model to address modern software processes and construction techniques. Also introduces emerging COCOMO II extensions for cost and schedule estimation of COTS integration and rapid development. CD-ROM contains a current copy of COCOMO II with demonstration version of three packages. DLC: Computer software--Costs.},
	language = {English},
	publisher = {Prentice Hall},
	author = {Horowitz, Ellis and Madachy, Ray and Reifer, Donald and Steece, Bert and Clark, Bradford K.},
	editor = {Boehm, Barry W.},
	month = jan,
	year = {2001},
}

@article{korkmaz_github_2024,
	title = {From {GitHub} to {GDP}: {A} framework for measuring open source software innovation},
	volume = {53},
	issn = {0048-7333},
	shorttitle = {From {GitHub} to {GDP}},
	url = {https://www.sciencedirect.com/science/article/pii/S0048733324000039},
	doi = {10.1016/j.respol.2024.104954},
	abstract = {Open source software (OSS) is software that anyone can review, modify, and distribute freely, usually with only minor restrictions such as giving credit to the creator of the work. The use of OSS is growing rapidly, due to its value in increasing firm and economy-wide productivity. Despite its widespread use, there is no standardized methodology for measuring the scope and impact of this fundamental intangible asset. This study presents a framework to measure the value of OSS using data collected from GitHub, the largest platform in the world with over 100 million developers. The data include over 7.6 million repositories where software is developed, stored, and managed. We collect information about contributors and development activity such as code changes and license detail. By adopting a cost estimation model from software engineering, we develop a methodology to generate estimates of investment in OSS that are consistent with the U.S. national accounting methods used for measuring software investment. We generate annual estimates of current and inflation-adjusted investment as well as the net stock of OSS for the 2009–2019 period. Our estimates show that the U.S. investment in 2019 was \$37.8 billion with a current-cost net stock of \$74.3 billion.},
	number = {3},
	urldate = {2024-06-25},
	journal = {Research Policy},
	author = {Korkmaz, Gizem and Santiago Calderón, J. Bayoán and Kramer, Brandon L. and Guci, Ledia and Robbins, Carol A.},
	month = apr,
	year = {2024},
	keywords = {Innovation, Open source software, GitHub, Cost measurement, Gross domestic product, National accounts, Software investment},
	pages = {104954},
}

@inproceedings{gousios_ghtorent_2013,
	address = {San Francisco, CA, USA},
	series = {{MSR} '13},
	title = {The {GHTorent} dataset and tool suite},
	isbn = {978-1-4673-2936-1},
	abstract = {During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve high-quality, interconnected data. The GHTorent project has been collecting data for all public projects available on Github for more than a year. In this paper, we present the dataset details and construction process and outline the challenges and research opportunities emerging from it.},
	urldate = {2024-06-25},
	booktitle = {Proceedings of the 10th {Working} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {IEEE Press},
	author = {Gousios, Georgios},
	month = may,
	year = {2013},
	pages = {233--236},
}

@article{korkmaz_modeling_2019,
	title = {Modeling the impact of {Python} and {R} packages using dependency and contributor networks},
	volume = {10},
	issn = {1869-5469},
	url = {https://doi.org/10.1007/s13278-019-0619-1},
	doi = {10.1007/s13278-019-0619-1},
	abstract = {This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models.},
	language = {en},
	number = {1},
	urldate = {2024-06-25},
	journal = {Social Network Analysis and Mining},
	author = {Korkmaz, Gizem and Kelling, Claire and Robbins, Carol and Keller, Sallie},
	month = dec,
	year = {2019},
	keywords = {Dependency network, Impact measures, Open-source software, Programming languages},
	pages = {7},
}

@article{singh_chawla_unsung_2016,
	title = {The unsung heroes of scientific software},
	volume = {529},
	copyright = {2016 Springer Nature Limited},
	issn = {1476-4687},
	url = {https://www.nature.com/articles/529115a},
	doi = {10.1038/529115a},
	abstract = {Creators of computer programs that underpin experiments don’t always get their due — so the website Depsy is trying to track the impact of research code.},
	language = {en},
	number = {7584},
	urldate = {2024-06-25},
	journal = {Nature},
	author = {Singh Chawla, Dalmeet},
	month = jan,
	year = {2016},
	note = {Publisher: Nature Publishing Group},
	keywords = {Software, Authorship, Publishing, Research management},
	pages = {115--116},
}

@article{bass_new_1969,
	title = {A {New} {Product} {Growth} for {Model} {Consumer} {Durables}},
	volume = {15},
	issn = {0025-1909},
	url = {https://www.jstor.org/stable/2628128},
	abstract = {A growth model for the timing of initial purchase of new products is developed and tested empirically against data for eleven consumer durables. The basic assumption of the model is that the timing of a consumer's initial purchase is related to the number of previous buyers. A behavioral rationale for the model is offered in terms of innovative and imitative behavior. The model yields good predictions of the sales peak and the timing of the peak when applied to historical data. A long-range forecast is developed for the sales of color television sets.},
	number = {5},
	urldate = {2024-08-28},
	journal = {Management Science},
	author = {Bass, Frank M.},
	year = {1969},
	note = {Publisher: INFORMS},
	pages = {215--227},
}

@article{bass_why_1994,
	title = {Why the {Bass} {Model} {Fits} without {Decision} {Variables}},
	volume = {13},
	issn = {0732-2399},
	url = {https://www.jstor.org/stable/183674},
	abstract = {Over a large number of new products and technological innovations, the Bass diffusion model (Bass 1969) describes the empirical adoption curve quite well. In this study, we generalize the Bass model to include decision variables such as price and advertising. The generalized model reduces to the Bass model as a special case and explains why the Bass model works so well without including decision variables. We compare our generalized Bass model to other approaches from the literature for including decision variables into diffusion models, and our results provide both theoretical and empirical support for the generalized Bass model. We also show how our generalized Bass model can be used for product planning purposes.},
	number = {3},
	urldate = {2024-08-28},
	journal = {Marketing Science},
	author = {Bass, Frank M. and Krishnan, Trichy V. and Jain, Dipak C.},
	year = {1994},
	note = {Publisher: INFORMS},
	pages = {203--223},
}

@article{lee_bayesian_2003,
	title = {A {Bayesian} {Model} for {Prelaunch} {Sales} {Forecasting} of {Recorded} {Music}},
	volume = {49},
	issn = {0025-1909},
	url = {https://pubsonline.informs.org/doi/abs/10.1287/mnsc.49.2.179.12744},
	doi = {10.1287/mnsc.49.2.179.12744},
	abstract = {In a situation where several hundred new music albums are released each month, producing sales forecasts in a reliable and consistent manner is a rather difficult and cumbersome task. The purpose of this study is to obtain sales forecasts for a new album before it is introduced. We develop a hierarchical Bayesian model based on a logistic diffusion process. It allows for the generalization of various adoption patterns out of discrete data and can be applied in a situation where the eventual number of adopters is unknown. Using sales of previous albums along with information known prior to the launch of a new album, the model constructs informed priors, yielding prelaunch sales forecasts, which are out-of-sample predictions. In the context of new product forecasting before introduction, the information we have is limited to the relevant background characteristics of a new album. Knowing only the general attributes of a new album, the meta-analytic approach proposed here provides an informed prior on the dynamics of duration, the effects of marketing variables, and the unknown market potential. As new data become available, weekly sales forecasts and market size (number of eventual adopters) are revised and updated. We illustrate our approach using weekly sales data of albums that appeared inBillboard'sTop 200 albums chart from January 1994 to December 1995.},
	number = {2},
	urldate = {2024-08-28},
	journal = {Management Science},
	author = {Lee, Jonathan and Boatwright, Peter and Kamakura, Wagner A.},
	month = feb,
	year = {2003},
	note = {Publisher: INFORMS},
	keywords = {forecasting, empirical generalization, hierarchical bayes model},
	pages = {179--196},
}

@article{gonzalez-barahona_brief_2021,
	title = {A {Brief} {History} of {Free}, {Open} {Source} {Software} and {Its} {Communities}},
	volume = {54},
	issn = {0018-9162},
	url = {https://doi.org/10.1109/MC.2020.3041887},
	doi = {10.1109/MC.2020.3041887},
	abstract = {Free, open source software (FOSS) has a long history, beginning with the origins of software itself, when the terms free software and open source software were not yet defined. Learning about the milestones of this history may help to understand FOSS today.},
	number = {2},
	urldate = {2024-08-28},
	journal = {Computer},
	author = {Gonzalez-Barahona, Jesus M.},
	month = feb,
	year = {2021},
	pages = {75--79},
}

@article{hoffmann_value_2024,
	title = {The {Value} of {Open} {Source} {Software}},
	issn = {1556-5068},
	url = {https://www.ssrn.com/abstract=4693148},
	doi = {10.2139/ssrn.4693148},
	abstract = {The value of a non-pecuniary (free) product is inherently difficult to assess. A pervasive example is open source software (OSS), a global public good that plays a vital role in the economy and is foundational for most technology we use today. However, it is difficult to measure the value of OSS due to its non-pecuniary nature and lack of centralized usage tracking. Therefore, OSS remains largely unaccounted for in economic measures. Although prior studies have estimated the supply side costs to recreate this software, a lack of data has hampered estimating the much larger demand-side (usage) value created by OSS. Therefore, to understand the complete economic and social value of widely-used OSS, we leverage unique global data from two complementary sources capturing OSS usage by millions of global firms. We first estimate the supply-side value by calculating the cost to recreate the most widely used OSS once. We then calculate the demand side value based on a replacement value for each firm that uses the software and would need to build it internally if OSS did not exist. We estimate the supply-side value of widely-used OSS is \$4.15 billion, but that the demand-side value is much larger at \$8.8 trillion. We find that firms would need to spend 3.5 times more on software than they currently do if OSS did not exist. The top six programming languages in our sample comprise 84\% of the demand-side value of OSS. Further, 96\% of the demand-side value is created by only 5\% of OSS developers.},
	language = {en},
	urldate = {2024-11-02},
	journal = {SSRN Electronic Journal},
	author = {Hoffmann, Manuel and Nagle, Frank and Zhou, Yanuo},
	year = {2024},
}

@article{romer_endogenous_1990,
	title = {Endogenous {Technological} {Change}},
	volume = {98},
	issn = {0022-3808},
	url = {https://www.jstor.org/stable/2937632},
	abstract = {Growth in this model is driven by technological change that arises from intentional investment decisions made by profit-maximizing agents. The distinguishing feature of the technology as an input is that it is neither a conventional good nor a public good; it is a nonrival, partially excludable good. Because of the nonconvexity introduced by a nonrival good, price-taking competition cannot be supported. Instead, the equilibrium is one with monopolistic competition. The main conclusions are that the stock of human capital determines the rate of growth, that too little human capital is devoted to research in equilibrium, that integration into world markets will increase growth rates, and that having a large population is not sufficient to generate growth.},
	number = {5},
	urldate = {2024-11-02},
	journal = {Journal of Political Economy},
	author = {Romer, Paul M.},
	year = {1990},
	note = {Publisher: University of Chicago Press},
	pages = {S71--S102},
}

@article{romer_origins_1994,
	title = {The {Origins} of {Endogenous} {Growth}},
	volume = {8},
	issn = {0895-3309},
	url = {https://www.jstor.org/stable/2138148},
	number = {1},
	urldate = {2024-11-02},
	journal = {The Journal of Economic Perspectives},
	author = {Romer, Paul M.},
	year = {1994},
	note = {Publisher: American Economic Association},
	pages = {3--22},
}

@article{romer_increasing_1986,
	title = {Increasing {Returns} and {Long}-{Run} {Growth}},
	volume = {94},
	issn = {0022-3808},
	url = {https://www.jstor.org/stable/1833190},
	abstract = {This paper presents a fully specified model of long-run growth in which knowledge is assumed to be an input in production that has increasing marginal productivity. It is essentially a competitive equilibrium model with endogenous technological change. In contrast to models based on diminishing returns, growth rates can be increasing over time, the effects of small disturbances can be amplified by the actions of private agents, and large countries may always grow faster than small countries. Long-run evidence is offered in support of the empirical relevance of these possibilities.},
	number = {5},
	urldate = {2024-11-02},
	journal = {Journal of Political Economy},
	author = {Romer, Paul M.},
	year = {1986},
	note = {Publisher: University of Chicago Press},
	pages = {1002--1037},
}

@misc{nguyen_are_2025,
	title = {Are the {Majority} of {Public} {Computational} {Notebooks} {Pathologically} {Non}-{Executable}?},
	url = {http://arxiv.org/abs/2502.04184},
	doi = {10.48550/arXiv.2502.04184},
	abstract = {Computational notebooks are the de facto platforms for exploratory data science, offering an interactive programming environment where users can create, modify, and execute code cells in any sequence. However, this flexibility often introduces code quality issues, with prior studies showing that approximately 76\% of public notebooks are non-executable, raising significant concerns about reusability. We argue that the traditional notion of executability - requiring a notebook to run fully and without error - is overly rigid, misclassifying many notebooks and overestimating their non-executability. This paper investigates pathological executability issues in public notebooks under varying notions and degrees of executability. Even partially improving executability can improve code comprehension and offer a pathway for dynamic analyses. With this insight, we first categorize notebooks into potentially restorable and pathological non-executable notebooks and then measure how removing misconfiguration and superficial execution issues in notebooks can improve their executability (i.e., additional cells executed without error). In a dataset of 42,546 popular public notebooks containing 34,659 non-executable notebooks, only 21.3\% are truly pathologically non-executable. For restorable notebooks, LLM-based methods fully restore 5.4\% of previously non-executable notebooks. Among the partially restored, the executability of notebooks improves by 42.7\% and 28\% by installing the correct modules and generating synthetic data. These findings challenge prior assumptions, suggesting that notebooks have higher executability than previously reported, many of which offer valuable partial execution, and that their executability should be evaluated within the interactive notebook paradigm rather than through traditional software executability standards.},
	urldate = {2025-02-17},
	publisher = {arXiv},
	author = {Nguyen, Tien and Gill, Waris and Gulzar, Muhammad Ali},
	month = feb,
	year = {2025},
	note = {arXiv:2502.04184 [cs]},
	keywords = {Computer Science - Software Engineering},
}

@misc{dey_cross_2024,
	title = {{CROSS}: {A} {Contributor}-{Project} {Interaction} {Lifecycle} {Model} for {Open} {Source} {Software}},
	shorttitle = {{CROSS}},
	url = {http://arxiv.org/abs/2409.08267},
	doi = {10.48550/arXiv.2409.08267},
	abstract = {Despite the widespread adoption of open source software (OSS), its sustainability remains a critical concern, particularly in light of security vulnerabilities and the often inadequate end-of-service (EoS) processes for OSS projects as they decline. Existing models of OSS community participation, like the Onion model and the episodic contribution model, offer valuable insights but are fundamentally incompatible and fail to provide a comprehensive picture of contributor engagement with OSS projects. This paper addresses these gaps by proposing the CROSS model, a novel contributor-project interaction lifecycle model for open source, which delineates the various lifecycle stages of contributor-project interaction, along with the driving and retaining forces pertinent to each stage. By synthesizing existing research on OSS communities, organizational behavior, and human resource development, it explains a range of archetypal cases of contributor engagement and highlights research gaps, especially in EoS/offboarding scenarios. The CROSS model provides a foundation for understanding and enhancing the sustainability of OSS projects, offering a robust foundation for future research and practical application.},
	urldate = {2025-02-17},
	publisher = {arXiv},
	author = {Dey, Tapajit and Fitzgerald, Brian and Daniel, Sherae},
	month = sep,
	year = {2024},
	note = {arXiv:2409.08267 [cs]},
	keywords = {Computer Science - Information Theory, Computer Science - Computers and Society, Computer Science - Software Engineering, Mathematics - Information Theory},
}

@misc{droesch_measuring_2020,
	title = {Measuring the engagement of an open source software community, https://www.bvp.com/atlas/measuring-the-engagement-of-an-open-source-software-community},
	url = {https://www.bvp.com/atlas/measuring-the-engagement-of-an-open-source-software-community},
	abstract = {In our Open Source Software Roadmap, we discussed why Bessemer is so excited about the category, the lessons we have learned investing in OSS companies, and the framework we use to evaluate these businesses. Community is one of the six criteria in our open source assessment framework and is an important measure of a project’s health. As part of our research and investment in the space we have analyzed the top 10,000 open source projects on GitHub in an effort to better understand what drives and underpins the best open source projects of the past decade. Here’s what we learned from that analysis.},
	language = {en-US},
	urldate = {2025-02-17},
	journal = {Bessemer Venture Partners},
	author = {Droesch, Mike and Karp, Amit and Sterman, Ariel and Kurzweil, Ethan},
	month = oct,
	year = {2020},
}

@misc{wladawsky-berger_whats_2024,
	title = {What’s the {Value} of {Open} {Source} {Software} {Based} on {Actual} {Usage} {Data}?},
	url = {https://blog.irvingwb.com/blog/2024/04/the-supply-and-demand-side-economic-value-of-open-source-software.html},
	abstract = {“The value of a non-pecuniary (free) product is inherently difficult to assess,” wrote Manuel Hoffmann, Frank Nagle, and Yanuo Zhou in their recent working paper, “The Value of Open Source Software.” “A pervasive example is open source software (OSS), a...},
	urldate = {2025-02-22},
	journal = {Irving Wladawsky-Berger},
	author = {Wladawsky-Berger, Irving},
	month = apr,
	year = {2024},
}

@misc{wladawsky-berger_impact_2022,
	title = {The {Impact} of {Open} {Source} on the {EU} {Economy}},
	url = {https://blog.irvingwb.com/blog/2022/03/impact-of-open-source-on-the-european-community.html},
	abstract = {In the 1990s, open source was generally viewed as experimental approach to software development mostly used by research and academic communities on emerging projects like the Internet and Linux. Open source has since evolved to become a well-accepted model of...},
	urldate = {2025-02-22},
	journal = {Irving Wladawsky-Berger},
	author = {Wladawsky-Berger, Irving},
	month = mar,
	year = {2022},
}

@techreport{chesbrough_measuring_2023,
	title = {Measuring the {Economic} {Value} of {Open} {Source}: {A} {Survey} and a {Preliminary} {Analysis}},
	shorttitle = {Measuring the {Economic} {Value} of {Open} {Source}},
	url = {https://www.linuxfoundation.org/research/measuring-economic-value-of-os},
	abstract = {Open source technologies are free to use, making them challenging to value in economic terms. While the reasons for contributing to open source code have been extensively studied, the reasons for adopting open source, and the value of that adoption, have received less attention.

Professor Henry Chesbrough, a pioneer on the subject of open innovation, conducted a survey to measure the economic value of open source, analyzing where and to what extent companies experience benefits of open source adoption. Aggregating the findings of this survey, this report discusses the perceived economic benefits of open source software, including cost savings, faster development, open standards, and interoperability.

To learn more about how individuals value open source from an economic perspective, and gain evidence-based insight on the value of supporting open source adoption, read the full report!},
	urldate = {2025-02-22},
	institution = {The Linux Foundation},
	author = {Chesbrough, Henry},
	month = mar,
	year = {2023},
	doi = {10.70828/MNOD1451},
}

@article{blind_estimating_2024,
	title = {Estimating the {GDP} effect of {Open} {Source}  {Software} and its complementarities with {R}\&{D} and patents: evidence and policy implications},
	volume = {49},
	issn = {1573-7047},
	shorttitle = {Estimating the {GDP} effect of {Open} {Source}  {Software} and its complementarities with {R}\&{D} and patents},
	url = {https://doi.org/10.1007/s10961-023-09993-x},
	doi = {10.1007/s10961-023-09993-x},
	abstract = {Open Source Software (OSS) has become an increasingly important knowledge asset in modern economies. However, the economic impact of OSS on countries’ GDP is ambivalent due to its public good character. Using a cross-country panel from 2000 to 2018, including 25 of the largest EU countries plus the USA, Japan, Korea, Canada, China, Norway, and Switzerland, matching OSS commits to GitHub to macroeconomic data provided by the OECD, our results confirm the dual nature of OSS. On the one hand, the open-access character creates great learning potential by providing a commonly accessible productive resource for all countries. On the other hand, it creates outward-directed spillovers associated with own OSS contributions. Accordingly, on average, we find that countries experience an increase in GDP when the world stock of OSS grows. However, smaller countries experience a decline in GDP resulting from their own contributions due to knowledge spillovers. The net effect is nonetheless positive. If no country contributed to OSS development, GDP for the average country would be 2.2\% lower in the long run. Moreover, the losses associated with unintended spillovers are lower for countries with a higher R\&D and patenting intensity. Based on our findings, we derive implications for policies and regulations concerning OSS.},
	language = {en},
	number = {2},
	urldate = {2025-03-19},
	journal = {The Journal of Technology Transfer},
	author = {Blind, Knut and Schubert, Torben},
	month = apr,
	year = {2024},
	keywords = {GDP, GitHub, Open Source Software, Patents, R\&D},
	pages = {466--491},
}

@inproceedings{champion_underproduction_2021,
	title = {Underproduction: {An} {Approach} for {Measuring} {Risk} in {Open} {Source} {Software}},
	shorttitle = {Underproduction},
	url = {http://arxiv.org/abs/2103.00352},
	doi = {10.1109/SANER50967.2021.00043},
	abstract = {The widespread adoption of Free/Libre and Open Source Software (FLOSS) means that the ongoing maintenance of many widely used software components relies on the collaborative effort of volunteers who set their own priorities and choose their own tasks. We argue that this has created a new form of risk that we call 'underproduction' which occurs when the supply of software engineering labor becomes out of alignment with the demand of people who rely on the software produced. We present a conceptual framework for identifying relative underproduction in software as well as a statistical method for applying our framework to a comprehensive dataset from the Debian GNU/Linux distribution that includes 21,902 source packages and the full history of 461,656 bugs. We draw on this application to present two experiments: (1) a demonstration of how our technique can be used to identify at-risk software packages in a large FLOSS repository and (2) a validation of these results using an alternate indicator of package risk. Our analysis demonstrates both the utility of our approach and reveals the existence of widespread underproduction in a range of widely-installed software components in Debian.},
	urldate = {2025-03-19},
	booktitle = {2021 {IEEE} {International} {Conference} on {Software} {Analysis}, {Evolution} and {Reengineering} ({SANER})},
	author = {Champion, Kaylea and Hill, Benjamin Mako},
	month = mar,
	year = {2021},
	note = {arXiv:2103.00352 [cs]},
	keywords = {Computer Science - Computers and Society, Computer Science - Software Engineering},
	pages = {388--399},
}

@article{tamburri_organizational_2013,
	title = {Organizational social structures for software engineering},
	volume = {46},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/2522968.2522971},
	doi = {10.1145/2522968.2522971},
	abstract = {Software engineering evolved from a rigid process to a dynamic interplay of people (e.g., stakeholders or developers). Organizational and social literature call this interplay an Organizational Social Structure (OSS). Software practitioners still lack a systematic way to select, analyze, and support OSSs best fitting their problems (e.g., software development). We provide the state-of-the-art in OSSs, and discuss mechanisms to support OSS-related decisions in software engineering (e.g., choosing the OSS best fitting development scenarios). Our data supports two conclusions. First, software engineering focused on building software using project teams alone, yet these are one of thirteen OSS flavors from literature. Second, an emerging OSS should be further explored for software development: social networks. This article represents a first glimpse at OSS-aware software engineering, that is, to engineer software using OSSs best fit for the problem.},
	number = {1},
	urldate = {2025-03-19},
	journal = {ACM Comput. Surv.},
	author = {Tamburri, Damian A. and Lago, Patricia and Vliet, Hans van},
	month = jul,
	year = {2013},
	pages = {3:1--3:35},
}

@article{tamburri_exploring_2021,
	title = {Exploring {Community} {Smells} in {Open}-{Source}: {An} {Automated} {Approach}},
	volume = {47},
	issn = {1939-3520},
	shorttitle = {Exploring {Community} {Smells} in {Open}-{Source}},
	url = {https://ieeexplore.ieee.org/document/8651329},
	doi = {10.1109/TSE.2019.2901490},
	abstract = {Software engineering is now more than ever a community effort. Its success often weighs on balancing distance, culture, global engineering practices and more. In this scenario many unforeseen socio-technical events may result into additional project cost or “social” debt, e.g., sudden, collective employee turnover. With industrial research we discovered community smells, that is, sub-optimal patterns across the organisational and social structure in a software development community that are precursors of such nasty socio-technical events. To understand the impact of community smells at large, in this paper we first introduce CodeFace4Smells, an automated approach able to identify four community smell types that reflect socio-technical issues that have been shown to be detrimental both the software engineering and organisational research fields. Then, we perform a large-scale empirical study involving over 100 years worth of releases and communication structures data of 60 open-source communities: we evaluate (i) their diffuseness, i.e., how much are they distributed in open-source, (ii) how developers perceive them, to understand whether practitioners recognize their presence and their negative effects in practice, and (iii) how community smells relate to existing socio-technical factors, with the aim of assessing the inter-relations between them. The key findings of our study highlight that community smells are highly diffused in open-source and are perceived by developers as relevant problems for the evolution of software communities. Moreover, a number of state-of-the-art socio-technical indicators (e.g., socio-technical congruence) can be used to monitor how healthy a community is and possibly avoid the emergence of social debt.},
	number = {3},
	urldate = {2025-03-19},
	journal = {IEEE Transactions on Software Engineering},
	author = {Tamburri, Damian A. and Palomba, Fabio and Kazman, Rick},
	month = mar,
	year = {2021},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Software engineering, Open source software, empirical software engineering, human aspects in software engineering, Microstructure, Organizational aspects, Social networking (online), social software engineering, software community smells, Software organisational structures, Tools},
	pages = {630--652},
}

@misc{gaughan_engineering_2024,
	title = {Engineering {Formality} and {Software} {Risk} in {Debian} {Python} {Packages}},
	url = {http://arxiv.org/abs/2403.05728},
	doi = {10.48550/arXiv.2403.05728},
	abstract = {While free/libre and open source software (FLOSS) is critical to global computing infrastructure, the maintenance of widely-adopted FLOSS packages is dependent on volunteer developers who select their own tasks. Risk of failure due to the misalignment of engineering supply and demand -- known as underproduction -- has led to code base decay and subsequent cybersecurity incidents such as the Heartbleed and Log4Shell vulnerabilities. FLOSS projects are self-organizing but can often expand into larger, more formal efforts. Although some prior work suggests that becoming a more formal organization decreases project risk, other work suggests that formalization may increase the likelihood of project abandonment. We evaluate the relationship between underproduction and formality, focusing on formal structure, developer responsibility, and work process management. We analyze 182 packages written in Python and made available via the Debian GNU/Linux distribution. We find that although more formal structures are associated with higher risk of underproduction, more elevated developer responsibility is associated with less underproduction, and the relationship between formal work process management and underproduction is not statistically significant. Our analysis suggests that a FLOSS organization's transformation into a more formal structure may face unintended consequences which must be carefully managed.},
	urldate = {2025-03-19},
	publisher = {arXiv},
	author = {Gaughan, Matthew and Champion, Kaylea and Hwang, Sohyeon},
	month = apr,
	year = {2024},
	note = {arXiv:2403.05728 [cs]},
	keywords = {Computer Science - Computers and Society, Computer Science - Software Engineering},
}
